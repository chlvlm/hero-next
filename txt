export const AzbSchema = z.object({
  amount: z.string(),
  receiver: z.string(),
  isConvert: z.boolean(),
})

export interface TAzb extends z.infer<typeof AzbSchema> { }

export enum AzbTabName {
  Convert = 'Convert',
  Redeem = 'Redeem',
}

------------

import { IToken } from '@/types/erc20'
import { AzbSchema, TAzb } from '@/types/schema/yield'
import { AzbTabName } from '@/types/yield'
import { Button, cn, Modal, ModalBody, ModalContent, ModalHeader, useDisclosure } from '@heroui/react'
import { zodResolver } from '@hookform/resolvers/zod'
import { useMemo } from 'react'
import { FormProvider, useForm } from 'react-hook-form'
import { zeroAddress } from 'viem'
import TxButton from '../buttons/tx-button'
import Info from '../info'
import TokenInput from '../inputs/token-input'

export default function AzbModal() {
  const { isOpen, onOpen, onOpenChange, onClose } = useDisclosure()
  const formMethods = useForm<TAzb>({
    mode: 'onChange',
    resolver: zodResolver(AzbSchema),
  })
  const { watch, control, setValue } = formMethods
  const { isConvert, amount, receiver } = watch()
  const azbFooters = useMemo(() => {
    const redeemInfo = { title: 'Redeemable', value: '--' }
    const baseList = [
      {
        title: 'Price',
        value: '--',
      },
      {
        title: 'Fees',
        value: '--',
      },
    ]
    return isConvert ? baseList : [redeemInfo, ...baseList]
  }, [isConvert])
  const onAmountChange = (value: string) => {
    setValue('amount', value)
  }
  const onReceiverChange = (value: string) => {
    setValue('receiver', value)
  }
  const handleClick = () => {}
  return (
    <FormProvider {...formMethods}>
      <Button
        variant='bordered'
        fullWidth
        className='hover:bg-primary'
        radius='full'
        onPress={() => {
          onOpen()
          setValue('isConvert', true)
        }}
      >
        {AzbTabName.Convert}
      </Button>
      <Button
        variant='bordered'
        fullWidth
        className='hover:bg-primary'
        radius='full'
        onPress={() => {
          onOpen()
          setValue('isConvert', false)
        }}
      >
        {AzbTabName.Redeem}
      </Button>
      <Modal
        className={'md:max-w-lg'}
        isOpen={isOpen}
        onOpenChange={onOpenChange}
        placement='center'
        onClose={() => {
          formMethods.reset()
          onClose()
        }}
      >
        <ModalContent>
          <ModalHeader className='flex items-center justify-between'>
            {isConvert ? AzbTabName.Convert : AzbTabName.Redeem} {isConvert ? 'to' : 'from'} AZB
          </ModalHeader>
          <ModalBody className='pb-4 pt-0'>
            <div className='flex w-full flex-col'>
              <div
                className={cn(`mt-2 flex flex-col gap-2`, {
                  'flex-col-reverse': !isConvert,
                })}
              >
                <TokenInput
                  label={isConvert ? AzbTabName.Convert : 'Receive'}
                  tokens={[]}
                  control={control}
                  amountInputName={'amount'}
                  token={{} as IToken}
                  onAmountChange={onAmountChange}
                  balance={0n}
                  hideMax={!isConvert}
                />
                <TokenInput
                  label={isConvert ? 'Receive' : AzbTabName.Redeem}
                  control={control}
                  amountInputName={'receiver'}
                  token={{} as IToken}
                  onAmountChange={onReceiverChange}
                  balance={0n}
                  hideMax={isConvert}
                />
              </div>
              <div className='flex flex-col gap-2'>
                {azbFooters.map((footer) => (
                  <Info key={footer.title} title={footer.title} value={footer.value} />
                ))}
              </div>
              <TxButton
                color='primary'
                className='my-3'
                onClick={handleClick}
                radius='full'
                etherRequired={0n}
                erc20Token={zeroAddress}
                erc20Spender={zeroAddress}
                erc20Required={0n}
                erc20Balance={0n}
              >
                {isConvert ? AzbTabName.Convert : AzbTabName.Redeem}
              </TxButton>
            </div>
          </ModalBody>
        </ModalContent>
      </Modal>
    </FormProvider>
  )
}

------

'use client'
import { YieldAZBIcon } from '@/components/icons'
import Info from '@/components/info'
import { Card, CardBody, CardFooter, CardHeader, cn } from '@heroui/react'
import AzbModal from './azb-modal'

export default function Azb({ className }: { className?: string }) {
  const lockedValue = 0n
  const supply = 0n
  const wallet = 0n
  const price = 0n // lockedValue / supply
  return (
    <Card
      className={cn(
        'flex h-full flex-col bg-default-50 max-md:w-full max-md:gap-4 max-md:p-4 md:gap-6 md:p-6',
        className,
      )}
    >
      <CardHeader className='flex items-center gap-6 p-0'>
        <YieldAZBIcon className='max-md:h-20 max-md:w-20' />
        <div className='flex flex-col gap-2'>
          <div className='font-extrabold text-white max-md:text-xl md:text-2xl'>AZB</div>
          <div className='flex flex-col gap-1'>
            <div className='font-semibold text-white max-md:text-[28px] md:text-[32px]'>${price.formatUsd()}</div>
            <div className='text-base font-normal text-default-400'>Price</div>
          </div>
        </div>
      </CardHeader>
      <CardBody className='flex w-full flex-col gap-1 rounded-[20px] bg-default-100 p-4'>
        <Info title='Total Value Locked' value={`$${lockedValue.formatUsd()}`} />
        <Info title='Total Supply' value={`${supply.formatUsd()} AZB`} />
        <Info title='Your Wallet' value={`${wallet.formatUsd()} AZB`} />
      </CardBody>
      <CardFooter className='flex justify-end gap-4 p-0'>
        <AzbModal />
      </CardFooter>
    </Card>
  )
}
